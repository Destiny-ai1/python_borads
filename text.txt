1.고급언어와 저급언어 
저급:하드웨어에 가깝다.

고급: 사람에 가깝다.

2.언어 번역 프로그램 
우리가 개발한 소스 코드는 cpu가 바로 실행 불가능하다 (cpu는 이진수만 이해가능하다)
개발자는 사람이 이해하기 쉬운 고급언어만 사용한다
고급언어로 작성한 소스코드는 이진수로 변역되어야 실행이 가능
    번역프로그램은
        컴파일러: 번역한 다음 번역 결과 가 저장되어있는 (실행파일)형태
        인터프리터: 매번 새로 번역

3.의존성 이란  
여러사람들이 만들어둔 라이브러리를 적극 활용한다.
웹앱에서 내가만든 코드 + 외부 라이브러리가 모두 있어야 번역함=> 빌드한다(build)

4.의존성 관리
웹앱의 의존성은 사람이아니라 '프로그램'으로 관리해야됨
의존성을 관리 도구 의 역할을 해주는 프로그램은 > 빌드도구라고한다
자바스크립트의 경우 cdn (jQuery,bootstep) 방식
파이썬은 pip 프로그램을 사용

5.라이브러리와 프레임워크
    라이브러리(기능의 집합 ) :
     개발자가 필요한 기능을 가져다가 사용한다
    프레임워크 (기능의집합+사용법) :
    어떤 프로그램을 작성하기 위한 뼈대의 역할
    개발자가 작성한 코드를 프레임 워크에 위탁 실행한다.
        개발자가 코드를 작성하더라도 프레임워크에서  <(제어 역전)>시킨다 

6.flask 사용 방법
    프로젝트 폴더에는 python 들어가고
    프로젝트 안에 templates 을 만들어 html 을 만들고
    static : css, js
    python > templates = static
    실행할때는 python 파일에서 실행

    return flask.render_template('/insa.html', name='xxx')

7. SSR/ CSR
    view는 누가 만드는가 

    SSR : 뷰를 서버가 생성한 다음 클라이언트에 보내준다
          개발하기쉬운데, 서버 부화가 심하다.    (submit)

    CSR : 서버에서 데이터를 보내면  
          JS에서 뷰를 생성한다 
          개발이 어렵운데 , 서버 부화가 적다.    (ajax)

8. 예외(Exception)
    문법이 틀린게 아니라 실행중(run time) 발생하는 오류
        대표적으로 0으로 나누기 
        이미지 출력 프로그램인데 이미지가 없는 경우 =>예외처리해서 처음으로 돌린다.
        예외 처리 : 프로그램이 정상적으로 실행되게 (사용자한테 오류메세지를 출력 안되게하기)
    =자바스크립트에서 
        try
        {
            예외가 발생할수있는 코드
            AAA
            BBB
            CCC
        } catch(err){
            예외가 발생할경우 여기로 이동
        }

9.요청하는 방법
    9-1.render_template,  자바는 forward 요청한다
    컨트롤러와 html 이 하나의 작업으로 이루어졌다 (즉, 주소가 바뀌지않는다.)
    작업은 요청으로서 시작되고 응답이 끝나면 요청은 파괴된다
    ★하나의 작업을 구성하는건 요청뿐이다★
    9-2. redirect
    주소가 변경된다(새롭게 작업한다)
    이전에 있던 요청은 파괴된다.
     
    HTTP: 요청이 들어오면 응답하고 끝 =>(상태가없다)
    이곳저곳에서 요청을했을때 이번요청이 지난요청이랑 같은지 알수있나? => 알수없다.

10. 사용자 정보를 저장방법
    -하나의 작업이라면 request를 사용
    request.SetAttribue("back',back);
    -사용자 마다 가지고 있는 저장공간 Session
    로그인 정보 , 장바구니 등을 저장하기 적합
    단 , 로그인할때 Session이 생성되는것이 아니고
    로그인에 사용된다.
    사용자가 일정시간 동안 사용하지 않을시 Session은 파괴된다
    (만드는 개발자 마다 다름)
    정보를 평생 저장할려면 Database를 사용

    중요하지 않은 정보는 사용자에저장 <=Cookie
    영구적이지는 않으나 서버의 메모리에 저장 <= Session
    영구적으로 계속 저장 <=Database
    
    ex)서버가 사용자 컴퓨터에 저장하는 텍스트 정보
     쿠키를 이용한 대표적인 사례: 방문한 링크가 보라색, 방문하지않는 링크는 파란색으로 유지
     
     세션이 없는 사용자가 접근하면 Session을 서버에서 생성하고 SessionID로 전송
    이제부터 사용자의 모든 요청에는 Sessiond이 포함되어있다.
    서버는 SessionID로 사용자를 구분한다.

    세션은 로그인에 사용되지만 로그인 할때 세션이 생성되는것이 아니다.
    정해진 시간동안 사용자가 요청을 보내지 않으면 세션은 파괴or 서버쪽에서 파괴할수 있다.
    쿠키 기반이므로 세컨도 보약이 취약

    HTTP의 상태를 살리기위해 Cookie 활용
    서버가 사용자에게 알려주는 text 파일(누가보냈는지,유효기간,내용등을 알수있다.)
    ex) 네이버에서 쿠기를 받았다면 네이버에 접근할때 서버로 자동 전송
        사용자 정보를 사용자 컴퓨터에 저장한다

11. flash,Session
    flash 란
    a에서 오류가 발생해 b로 이동하면서 오류 메세지를 발생시킨다.
    여기서 a>b로 이동해버리면 주소가 바뀌어 버리니 request는 사용 불가X
    flash ('메세지') 를 사용하면 Session에 담고 이동후 바로 삭제
    
    Session 이란
    사용자 정보를 서버의 메모리에 저장한다.
    주기적으로 일정시간마다 파괴된다.
    Session 생성과정 : Session없으면 서버는 Session 생성하고 SessionID를 쿠키로 전송
    사용처 : SSR에서 사용한다 
        Session 사용하려면 Cookie(웹브라우저)가 필요함
        Session을 이용한 로그인 방식은 form login 이라고한다.

12.Database

13. 요청과 세션
    -요청은 주소가 바뀌지 않는동안 유지
    -Session은 로그아웃하지 않으면 유지

14.스코프 (통용규칙) = 부작용을 방지하기위해 
    변수의 사용범위 
    python ex)
    
    x=100    {global 스코프(부작용이 일어나면 책임자가 없음)}

    {def aaa():                             {def bbb():
    a=10                                    b=20
    print(b)}                               print(a)}

15.함수스코프와 블록 스코프 
    함수스코프 : 함수내에서 스코프를 생성 => python
    블록스코프 : {}가 스코프를 생성 => 자바

ex1) 자바스크립트 스코프
    if(5>3){
        const a = 10;
    } console.log(a);              # 오류 : 스코프가 다르다

    if(5>3){
        var b= 20;
    } console.log(b);             #정상작동